cache:
  key: vls-global
  paths:
    - bin

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cache/cargo"

before_script:
  - ls -al
  - mkdir -p bin

stages:
  - build

# Do this in a separate job, so that it gets cached with high probability
# later jobs can be flaky and cache is not written when a job fails.
get_bitcoin:
  stage: build
  image: python:3.8
  cache:
    key: vls-bitcoin
    paths:
      - bin
  script:
    - ls -l bin
    - if [ ! -e bin/bitcoind ]; then
      wget --no-verbose https://bitcoin.org/bin/bitcoin-core-0.21.0/bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      echo da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032  bitcoin-0.21.0-x86_64-linux-gnu.tar.gz | sha256sum -c &&
      tar xzf bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      mv bitcoin-0.21.0/bin/bitcoind bin/ &&
      rm -rf bitcoin-0.21.0 ;
      fi
  artifacts:
    paths:
      - bin/bitcoind


rust-latest:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:latest
  needs: [ "get_bitcoin" ]
  cache:
    key: vls-compile-latest
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - cargo test
    # ensure vls-persist builds with no-std
    - cargo build -p vls-persist --no-default-features --features no-std
    # system test
    - bin/bitcoind --regtest --daemon --rpcuser=user --rpcpassword=pass
    - sleep 5
    - cargo run --bin frontend-system-test --features system-test

rust-latest-extras:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:latest
  cache:
    key: vls-compile-latest-extras
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    # test LSS
    - (cd lightning-storage-server && cargo test)

rust-1.66.0:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:1.66.0
  cache:
    key: vls-compile-1_66
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - cargo test

rust-1.66.0-lss:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:1.66.0
  cache:
    key: vls-compile-lss-1_66
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - (cd lightning-storage-server && cargo test)

embedded:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: devrandom01/rust-qemu:nightly-1-73-2023-07-23
  variables:
    RUSTFLAGS: "-C link-arg=-Tlink.x"
    CARGO_TARGET_THUMBV7M_NONE_EABI_RUNNER: "qemu-system-arm -cpu cortex-m3 -machine mps2-an385 -nographic -semihosting-config enable=on,target=native -kernel"
  script:
    - cd embedded && cargo run --release --target thumbv7m-none-eabi

demo-signer:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: devrandom01/rust-qemu:nightly-1-73-2023-07-23
  script:
    - (cd vls-signer-stm32 && cargo build --features stm32f412 --release --bin demo_signer)
    - (cd wasm && wasm-pack test --firefox --headless && cargo test)

coverage:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:latest
  cache:
    key: vls-coverage
    paths:
      - .cache/cargo
  script:
    - rustup show
    - rustup component add rustfmt
    - cargo install cargo-kcov
    - apt-get update
    - apt-get install -y protobuf-compiler
    - apt-get install -y cmake g++ pkg-config jq
    - apt-get install -y libcurl4-openssl-dev libelf-dev libdw-dev binutils-dev libiberty-dev
    - cargo kcov --print-install-kcov-sh | sh
    - CARGO_TARGET_DIR=target/kcov FIXTURES_DIR=`pwd`/data cargo kcov --verbose --all --features test_utils,kcov
      --lib --test functional_test
      -- --verify
      --exclude-region="kcov-ignore-start:kcov-ignore-end"
      --exclude-pattern="${CARGO_HOME},/usr/include,/usr/src/debug,src/util/loopback.rs"
    - bash <(curl -s https://codecov.io/bash) -t "${CODECOV_TOKEN}"

cargo-audit:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: rust:latest
  script:
    - rustup component add rustfmt
    - cargo install cargo-audit
    - cargo audit
    - (cd lightning-storage-server && cargo audit)

changelog:
  stage: build
  before_script:
    - git fetch origin main:main
  script:
    - |
      if [ "$(git cat-file -p $CI_COMMIT_SHA | grep -c 'parent')" -gt 1 ]; then
        echo "This is a merge commit, don't require a changelog entry"
      else
        echo "This is not a merge commit."
        if git log 'main..HEAD' --pretty="%s%x09%b" | grep -q -E 'Changelog-(\S*): (.*)$'; then
          echo "Changelog commit message found.";
        else
          echo "Error: No Changelog commit message found.";
          exit 1;
        fi
      fi
