image: python:3.8

cache:
  key: vls-global
  paths:
    - bin

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cache/cargo"

before_script:
  - ls -al
  - mkdir -p bin

stages:
  - build
  - fuzz

include:
  - template: Coverage-Fuzzing.gitlab-ci.yml

# Do this in a separate job, so that it gets cached with high probability
# later jobs can be flaky and cache is not written when a job fails.
get_bitcoin:
  stage: build
  cache:
    key: vls-bitcoin
    paths:
      - bin
  script:
    - ls -l bin
    - if [ ! -e bin/bitcoind ]; then
      wget --no-verbose https://bitcoin.org/bin/bitcoin-core-0.21.0/bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      echo da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032  bitcoin-0.21.0-x86_64-linux-gnu.tar.gz | sha256sum -c &&
      tar xzf bitcoin-0.21.0-x86_64-linux-gnu.tar.gz &&
      mv bitcoin-0.21.0/bin/bitcoind bin/ &&
      rm -rf bitcoin-0.21.0 ;
      fi
  artifacts:
    paths:
      - bin/bitcoind
    expire_in: 1 week

fuzz_channel:
  tags: [ saas-linux-large-amd64 ]
  image: 'rustlang/rust:nightly'
  extends: .fuzz_base
  cache:
    key: vls-fuzz
    paths:
      - .cache/cargo
  needs:
    - rust-msrv
  timeout: 90m
  variables:
    RUNNER_SCRIPT_TIMEOUT: 80m
    COVFUZZ_USE_REGISTRY: "true"
    COVFUZZ_CORPUS_NAME: "channel"
  script:
    - export RUSTFLAGS="-Zallow-features=proc_macro_span"
    - cargo install cargo-fuzz
    - cargo fuzz run channel -- -runs=0
    - ./gitlab-cov-fuzz run --regression=$REGRESSION -- ./fuzz/target/x86_64-unknown-linux-gnu/release/channel

rust-latest:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:latest
  needs: [ "get_bitcoin" ]
  cache:
    key: vls-compile-latest
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - cargo test
    # ensure vls-persist builds with no-std
    - cargo build -p vls-persist --no-default-features --features no-std,kvv
    # run tests for otlp and observability crate
    - cargo test --package vls-proxy --lib --all-features -- util
    # ensure benches build
    - cargo bench --no-run

rust-latest-extras:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:latest
  cache:
    key: vls-compile-latest-extras
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    # test LSS
    - (cd lightning-storage-server && cargo test)

rust-msrv:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:1.66.0
  cache:
    key: vls-compile-1_66
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - cargo test

rust-msrv-lss:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:1.66.0
  cache:
    key: vls-compile-lss-1_66
    paths:
      - bin
      - .cache/cargo
  script:
    - apt-get update
    - apt-get install -y protobuf-compiler
    - rustup component add rustfmt
    - (cd lightning-storage-server && cargo test)

embedded:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: devrandom01/rust-qemu:nightly-1-73-2023-07-23
  variables:
    RUSTFLAGS: "-C link-arg=-Tlink.x"
    CARGO_TARGET_THUMBV7M_NONE_EABI_RUNNER: "qemu-system-arm -cpu cortex-m3 -machine mps2-an385 -nographic -semihosting-config enable=on,target=native -kernel"
  script:
    - cd embedded && cargo run --release --target thumbv7m-none-eabi

demo-signer:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: devrandom01/rust-qemu:nightly-1-73-2023-07-23
  script:
    - (cd vls-signer-stm32 && cargo build --release --bin demo_signer)
    - (cd wasm && wasm-pack test --firefox --headless && cargo test)

coverage:
  tags: [ saas-linux-large-amd64 ]
  stage: build
  image: rust:latest
  needs: [ "get_bitcoin" ]
  cache:
    key: vls-coverage
    paths:
      - .cache/cargo
  coverage: '/^CORE_LINE_COVERAGE: \d+.\d+$/'
  script:
    - rustup show
    - rustup component add rustfmt
    - cargo install cargo-llvm-cov
    - apt-get update
    - apt-get install -y protobuf-compiler
    - apt-get install -y jq
    - bin/bitcoind --regtest --daemon --rpcuser=user --rpcpassword=pass
    - (cd lightning-storage-server && cargo build --bin lssd && cargo run --bin lssd &)
    - sleep 2
    - ./scripts/run-llvm-cov --features system-test
    - bash <(curl -s https://codecov.io/bash) -f target/codecov.json -t "${CODECOV_TOKEN}"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/cobertura.xml
    expire_in: 1 week

cargo-audit:
  tags: [ saas-linux-medium-amd64 ]
  stage: build
  image: rust:latest
  script:
    - rustup component add rustfmt
    - cargo install --locked cargo-audit
    - cargo audit
    - (cd lightning-storage-server && cargo audit)

changelog:
  stage: build
  before_script:
    - git fetch origin main:main
  allow_failure: true
  script:
    - |
      if [ "$(git cat-file -p $CI_COMMIT_SHA | grep -c 'parent')" -gt 1 ]; then
        echo "This is a merge commit, don't require a changelog entry"
      elif [[ "$CI_COMMIT_REF_NAME" =~ release ]]; then
        echo "This is a release branch, don't require a changelog entry"
      else
        echo "This is not a merge commit."
        if git log 'main..HEAD' --pretty="%s%x09%b" | grep -q -E 'Changelog-(\S*): (.*)$'; then
          echo "Changelog commit message found.";
        else
          echo "Error: No Changelog commit message found.";
          exit 1;
        fi
      fi
