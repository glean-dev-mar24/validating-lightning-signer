#!/usr/bin/env python3

import sys
import re

# Define your regular expressions
patterns = {
    'cln_addblock': {
        'regex': re.compile(r'^.*lightningd:.*Adding block.* (\d+): [0-9a-f]{64}$'),
        'consecutive': [],
        'last_height': 0
    },
    'vls_addblock': {
        'regex': re.compile(r'^.*vlsd2.*added block.* (\d+): [0-9a-f]{64}$'),
        'consecutive': [],
        'last_height': 0
    },
    'bitcoind_addblock': {
        'regex': re.compile(r'^.*UpdateTip:.*new best.* height=(\d+).*$'),
        'consecutive': [],
        'last_height': 0
    },
    # Add more patterns here in the future
}

current_pattern = None

def process_consecutive(pattern_key):
    consecutive = patterns[pattern_key]['consecutive']
    if len(consecutive) > 6:
        elided_count = len(consecutive) - 4
        for line in consecutive[:2]:
            sys.stdout.write(line)
        sys.stdout.write(f'[... {elided_count} consecutive lines elided ...]\n')
        for line in consecutive[-2:]:
            sys.stdout.write(line)
    else:
        for line in consecutive:
            sys.stdout.write(line)
    patterns[pattern_key]['consecutive'] = []
    patterns[pattern_key]['last_height'] = 0

for line in sys.stdin:
    matched = False
    for key, pattern_data in patterns.items():
        match = pattern_data['regex'].search(line)
        if match:
            height = int(match.group(1))
            
            # If currently tracking a different pattern or height difference is more than 1, process its lines first
            if (current_pattern and current_pattern != key) or \
               (current_pattern and height - patterns[current_pattern]['last_height'] != 1):
                process_consecutive(current_pattern)
                current_pattern = None

            if current_pattern is None:
                current_pattern = key
                patterns[key]['consecutive'] = [line]
                patterns[key]['last_height'] = height
            else:
                patterns[key]['consecutive'].append(line)
                patterns[key]['last_height'] = height

            matched = True
            break  # Stop checking other patterns once a match is found

    if not matched and current_pattern:
        # Process the accumulated lines of the current pattern
        process_consecutive(current_pattern)
        current_pattern = None

    if not current_pattern:
        sys.stdout.write(line)
