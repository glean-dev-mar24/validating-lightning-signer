#!/bin/bash

# Use the scripts from where we got this script
SCRIPT_PATH=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
LOGELIDE="$SCRIPT_DIR/logelide"

# Categories
all=false
everything=false
vls=false
lightningd=false
proxy=false
lssd=false
bitcoind=false
integration=false

# Default level
level=3

# Postprocessing
watches=false

# Constructed filter components
channelid=""
dbid=""
funding=""

# Add newlines before start heralds
spacers=true

# Function to display usage
usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTION...] [-- REGEXP...]

Sources:
 -a, --all           Match key lines from all servers
 -A, --everything    Match key lines from all servers at highest level
 -v, --vls           Match key lines from the vls signer
 -l, --lightningd    Match key lines from lightningd
 -p, --proxy         Match key lines from the remote_hsmd proxy
 -s, --lssd          Match key lines from the lssd
 -b  --bitcoind      Match key lines from bitcond
 -i, --integration   Match key lines from the integration framework

Levels:
 -e, --level=1       Display errors and warnings
 -e, --level=2       Add lifecycle (startup, version, shutdown, ...)
 -e, --level=3       Add L1 activity (blocks, L1 msgs, ...) [DEFAULT]
 -e, --level=4       Add L2 activity

Constructed regexps:
 -c, --channelid=CHANNELID   Match lines for CHANNELID
 -d, --dbid=DBID             Match lines for database id DBID
 -f, --funding=TXID:VOUT     Match lines for funding outpoint TXID:VOUT

Postprocessing:
 -w, --watches       Shorten {Forward,Reverse}WatchesReply lines

EOF
    [ "$1" = "exit" ] && exit 1
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        -a|--all)		all=true; shift ;;
        -A|--everything)	everything=true; shift ;;
        -v|--vls)		vls=true; shift ;;
        -l|--lightningd)	lightningd=true; shift ;;
        -p|--proxy)		proxy=true; shift ;;
        -s|--lssd)		lssd=true; shift ;;
        -b|--bitcoind)		bitcoind=true; shift ;;
        -i|--integration)	integration=true; shift ;;

        -e|--level*)
            level="${1#*=}"
            [[ "$level" == "$1" ]] && level="$2" && shift
            shift
            ;;

        -c|--channelid*)
            channelid="${1#*=}"
            [[ "$channelid" == "$1" ]] && channelid="$2" && shift
            shift
            ;;
        -d|--dbid*)
            dbid="${1#*=}"
            [[ "$dbid" == "$1" ]] && dbid="$2" && shift
            shift
            ;;
        -f|--funding*)
            funding="${1#*=}"
            [[ "$funding" == "$1" ]] && funding="$2" && shift
            shift
            ;;

        -w|--watches) watches=true; shift ;;

        --) shift; break ;; # Stop option parsing on '--'
        *) usage exit;; # Handle unknown options
    esac
done

# If $everything is set turn on all and highest level
if $everything; then
    all=true
    level=4
fi

# If $all is set, turn on all the categories
if $all; then
    vls=true
    lightningd=true
    proxy=true
    lssd=true
    bitcoind=true
    integration=true
fi

# ----------------------------------------------------------------
# Setup the interest filter

regex=""

# VLS
if $vls; then
    pfx="vlsd2/"
    if [[ $level -ge 1 ]]; then
        regex+="${pfx}.*WARN|"
        regex+="${pfx}.*ERROR|"
        regex+="${pfx}.*received error from handler|"
        regex+="${pfx}.*panicked at|"
    fi
    if [[ $level -ge 2 ]]; then
        regex+="${pfx}.*git_desc|"
        regex+="${pfx}.*setting protocol_version to|"
    fi
    if [[ $level -ge 3 ]]; then
        regex+="${pfx}.*added block|"
        regex+="${pfx}.*removed block|"
        regex+="${pfx}.*forget_channel|"
    fi
    if [[ $level -ge 4 ]]; then
        regex+="${pfx}.*signer got request|"
        regex+="${pfx}.*signer sending reply|"
        regex+="${pfx}.*adding invoice|"
    fi
fi

# CLN and CLBOSS
if $lightningd; then
    if [[ $level -ge 1 ]]; then
        regex+="BROKEN|"
        regex+="UNUSUAL|"
        regex+="sendrawtx exit\\s[1-9][0-9]*|"
        regex+="error broadcasting tx|"
    fi
    if [[ $level -ge 2 ]]; then
        regex+="Server started|"
        regex+=": Shutting down|"
    fi
    if [[ $level -ge 3 ]]; then
        regex+="New block at|"
        regex+="Adding block|"
        regex+="Removing stale block|"
        regex+="State changed from|"
    fi
    if [[ $level -ge 4 ]]; then
        regex+="->|"
    fi
fi

# proxy startup and warns
if $proxy; then
    pfx="remote_hsmd_socket/"
    if [[ $level -ge 1 ]]; then
        regex+="${pfx}.*WARN|"
        regex+="${pfx}.*ERROR|"
        regex+="${pfx}.*signer error|"
    fi
    if [[ $level -ge 2 ]]; then
        regex+="${pfx}.*git_desc|"
    fi
    if [[ $level -ge 3 ]]; then
        regex+="${pfx}.*ForgetChannel\(|"
    fi
    # if [[ $level -ge 4 ]]; then
    # fi
fi

# lssd startup and warns
if $lssd; then
    regex+="lssd|"
fi

# bitcoind startup and warns
if $bitcoind; then
    # if [[ $level -ge 1 ]]; then
    # fi
    if [[ $level -ge 2 ]]; then
        regex+="Bitcoin Core version|"
        regex+="Shutdown:|"
        regex+="Config file arg|"
        regex+="Command-line arg|"
    fi
    if [[ $level -ge 3 ]]; then
        regex+="UpdateTip:|"
        regex+="Enqueuing TransactionAddedToMempool:|"
        regex+="\[lightningd-tests\]|"
    fi
    # if [[ $level -ge 4 ]]; then
    # fi
fi

# Integration testing
if $integration; then
    if [[ $level -ge 1 ]]; then
        regex+="Time-out:|"
        regex+="-stderr:|"
    fi
    if [[ $level -ge 2 ]]; then
        regex+='==== ([0-9]+ passed)?,?([0-9]+ warnings)?,?([0-9]+ failed)?.* ====|'
    fi
    # if [[ $level -ge 3 ]]; then
    # fi
    # if [[ $level -ge 4 ]]; then
    # fi
fi

# ----------------

# Channelid might be special in the future
if [[ -n $channelid ]]; then
    regex+="$channelid|"
fi

# CLN dbid
if [[ -n $dbid ]]; then
    regex+="(dbid:? |chan#)$dbid|"
fi

# Funding outpoint
if [[ -n $funding ]]; then
    IFS=':' read -ra ADDR <<< "$funding"
    hex_number="${ADDR[0]}"
    decimal_number="${ADDR[1]}"
    regex+="$hex_number, (vout|funding_txout|outnum): $decimal_number|"
fi

# ----------------

# Append remaining arguments to the regex after '--'
for arg in "$@"; do
    regex+="$arg|"
done

# Remove the trailing '|'
regex=${regex%|}

# ----------------------------------------------------------------
# Setup the noisy hit removal filter

vregex=""

if $vls; then
    vregex+="error connecting to node, will retry|"
    vregex+="signer got request.*(TipInfo|GetHeartbeat|ForwardWatches|AddBlock)|"
    vregex+="signer sending reply.*(TipInfoReply|GetHeartbeat|ForwardWatchesReply|AddBlockReply)|"
fi

if $proxy; then
    vregex+="vls_proxy.*new client|"
fi

if $lightningd; then
    vregex+="Ignoring fee limits|"
    vregex+='/swapstatus .* not accessible|'
    vregex+='read loop .* saw error Protocol.*; ending|'
    vregex+='error code: -25.*bad-txns-inputs-missingorspent|'
    vregex+='error code: -27.*Transaction already in block chain|'
    vregex+='connectd: dev_report_fds:|'
fi

if $bitcoind; then
    vregex+="AddToWallet|"
fi

# Integration testing
if $integration; then
    vregex+="Waiting for .* in the logs|"
    vregex+="Found .* in logs|"
    vregex+="Did not find .* in logs|"
    vregex+="wait_for_log|"
    vregex+="warnings summary|"
fi

# Remove the trailing '|'
vregex=${vregex%|}

# ----------------------------------------------------------------
# Run the filters

# Initialize the command
cmd="grep -E --text --color=always \"$regex\""

# Append the sed command if watches are enabled
if $watches; then
    cmd+=" | sed -E 's/(ForwardWatchesReply|ReverseWatchesReply) {.*}/\1 { ... }/'"
fi

# Append the final grep command only if vregex has content
if [[ -n $vregex ]]; then
    cmd+=" | grep -E -v '$vregex'"
fi

# Add newlines before start heralds
if $spacers; then
    sregex=""
    sregex+="git_desc|"
    sregex+="Server started|"
    sregex+="Bitcoin Core version|"
    sregex=${sregex%|}
    cmd+=" | awk '/'\"$sregex\"'/ {print \"\"; print; next;} {print}'"
fi

# Elide consecutive runs of lines
cmd+=" | $LOGELIDE"

# Execute the constructed command
eval "$cmd"
