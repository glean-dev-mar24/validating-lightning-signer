#!/bin/bash

# Initialize variables
DIR=""

# Function to display usage
usage() {
    echo "Usage: $0 -D <directory> [additional logfilter args...]"
    exit 1
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -D|--directory)
            DIR="$2"
            shift 2
            ;;
        *)  # Any other arguments
            break
            ;;
    esac
done

# Check if the directory is provided
if [ -z "$DIR" ]; then
    usage
fi

# Check if the directory exists
if [ ! -d "$DIR" ]; then
    echo "Directory does not exist: $DIR"
    exit 1
fi

# Use the scripts from where we got this script
SCRIPT_PATH=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
LOGFILTER="$SCRIPT_DIR/logfilter"

# Change to the specified directory
cd "$DIR" || exit 1

INCLUDE_FILES='.*\(log\|errlog\).*'

# Exclude patterns
EXCLUDE_FILES="\
.*/vlsd/log\
\|.*/regtest/debug.log\
\|.*/regtest/\(chainstate\|indexes\|blocks\)/.*\
"

# Get the absolute path of the directory
ABSOLUTE_PATH=$(realpath ".")

# Read the sorted output of find into an array
readarray -t FILE_ARRAY < <(find . -type f -size +0 -regex "$INCLUDE_FILES" ! -regex "$EXCLUDE_FILES" | sort)

# Write the header to stdout
echo "### Directory: $ABSOLUTE_PATH"
echo ""
echo "**WARNING: ABRIDGED, THE TRUTH IS IN THE LOGS ...**"

# Iterate over the array
for FILE_PATH in "${FILE_ARRAY[@]}"; do
    trimmed_path="${FILE_PATH#./}"
    echo ""
    echo "#### [\`$trimmed_path\`](<$trimmed_path>)"
    echo "\`\`\`"
    if [[ "$FILE_PATH" == */errlog ]]; then
        # If the file ends with /errlog, concatenate
        cat "$FILE_PATH"
    else
        # Otherwise, use logfilter with additional arguments passed
        $LOGFILTER "$@" < "$FILE_PATH"
    fi
    echo "\`\`\`"
done
